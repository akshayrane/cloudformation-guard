name: Rust

on:
  push:
    branches: [ lambda_tests, main, development ]
#  pull_request:
#    branches: [ lambda_tests, main ]
  pull_request_target:
    branches: [lambda_tests, main, development]
    types: [opened, synchronize, labeled]

permissions:
  pull-requests: write
  id-token: write
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#    - name: Build
#      run: cargo build --release --verbose
#    - name: Run tests
#      run: cargo test --verbose
#
#  shellcheck:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v2
#    - name: Shellcheck
#      run: shellcheck install-guard.sh
#
#  formatting:
#    name: cargo fmt
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions-rust-lang/setup-rust-toolchain@v1
#        with:
#          components: rustfmt
#      - name: Rustfmt Check
#        uses: actions-rust-lang/rustfmt@v1

  remove-label:
    runs-on: ubuntu-latest
    if: |
      (github.event.pull_request.head.repo.full_name == github.repository) ||
      (github.event.action == 'labeled' && github.event.label.name == 'run-tests')
    steps:
      - name: Remove run-tests label, if applicable
        if: always() && github.event.label.name == 'run-tests'
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;
            const label = 'run-tests';
            github.issues.removeLabel({ owner, repo, issue_number, name: label });

  cfn-lambda-integration-tests:
    runs-on: ubuntu-latest
    environment: Production # this environment needs manual approval for workflow to be deployed
    env:
      region: ${{ secrets.LAMBDA_AWS_REGION }}
      role: ${{ secrets.LAMBDA_GITHUB_ACTION_ROLE }}
      account_id: ${{ secrets.LAMBDA_AWS_ACCOUNT }}
    permissions:
      pull-requests: write
      id-token: write
      contents: read

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Display change
        run: |
          pwd
          cat README.md

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.region }}
          role-to-assume: ${{ env.role }}
          role-session-name: LambdaTestGitHubAction

      - name: Generate identifiers
        id: generate-identifiers
        run: |
          LAMBDA_FUNCTION_PREFIX=GhCfnGrd
          LAMBDA_FUNCTION_SUFFIX=$(date +%s_%4N)
          LAMBDA_FUNCTION_NAME=${LAMBDA_FUNCTION_PREFIX}_${LAMBDA_FUNCTION_SUFFIX}
          ROLE_NAME="${LAMBDA_FUNCTION_NAME}_Role"

          echo "LAMBDA_FUNCTION_NAME=${LAMBDA_FUNCTION_NAME}" >> $GITHUB_OUTPUT
          echo "ROLE_NAME=${ROLE_NAME}" >> $GITHUB_OUTPUT
          
          echo "Lambda Function Name: ${LAMBDA_FUNCTION_NAME}"
          echo "Role Name: ${ROLE_NAME}"


      - name: Deploy cfn-guard-lambda
        env:
          AWS_ACCOUNT_ID: ${{ env.account_id }}
          AWS_REGION: ${{ env.region }}
          LAMBDA_FUNCTION_NAME: ${{ steps.generate-identifiers.outputs.LAMBDA_FUNCTION_NAME }}
          ROLE_NAME: ${{ steps.generate-identifiers.outputs.ROLE_NAME }}
        run: |
          rustup target add x86_64-unknown-linux-musl
          cd guard-lambda
          cargo build --release --target x86_64-unknown-linux-musl --verbose
          cp ./../target/x86_64-unknown-linux-musl/release/cfn-guard-lambda ./bootstrap && zip lambda.zip bootstrap && rm bootstrap

          aws iam create-role \
            --role-name $ROLE_NAME \
            --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}'

          aws iam attach-role-policy --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

          sleep 10

          aws lambda create-function \
            --function-name $LAMBDA_FUNCTION_NAME \
            --handler guard.handler \
            --zip-file fileb://./lambda.zip \
            --runtime provided \
            --role "arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ROLE_NAME}" \
            --environment Variables={RUST_BACKTRACE=1} \
            --tracing-config Mode=Active \
            --region $AWS_REGION


      - name: Invoke Lambda and test output
        env:
          LAMBDA_FUNCTION_NAME: ${{ steps.generate-identifiers.outputs.LAMBDA_FUNCTION_NAME }}
        run: |
          aws lambda invoke \
            --function-name $LAMBDA_FUNCTION_NAME \
            --payload '{"data":"{\"Resources\":{\"NewVolume\":{\"Type\":\"AWS::EC2::Volume\",\"Properties\":{\"Size\":500,\"Encrypted\":true,\"AvailabilityZone\":\"us-west-2b\"}},\"NewVolume2\":{\"Type\":\"AWS::EC2::Volume\",\"Properties\":{\"Size\":50,\"Encrypted\":true,\"AvailabilityZone\":\"us-west-2c\"}}}}","rules":["let ec2_volumes = Resources.*[ Type == /EC2::Volume/ ]\nrule EC2_ENCRYPTION_BY_DEFAULT when %ec2_volumes !empty {\n    %ec2_volumes.Properties.Encrypted == true \n      <<\n            Violation: All EBS Volumes should be encryped \n            Fix: Set Encrypted property to true\n       >>\n}"],"verbose":false}' \
            --cli-binary-format raw-in-base64-out \
            output.json

          echo '{"message":[{"data_from":"lambda-payload","rules_from":"lambda-rule","not_compliant":{},"not_applicable":[],"compliant":["EC2_ENCRYPTION_BY_DEFAULT"]}]}' > expected-output.json

          difference=`diff expected-output.json output.json -w | wc -c`

          if [ "$difference" != 0 ]
          then
            echo "Lambda output does not match the expected one"
            echo "--------------------------------"
            echo "Actual output:"
            cat output.json
            echo "--------------------------------"
            echo "Expected output:"
            cat expected-output.json
            echo "--------------------------------"
            echo "diff:"
            echo "$difference"
            exit 1
          fi


      - name: Clean up resources
        if: success() || failure()
        env:
          LAMBDA_FUNCTION_NAME: ${{ steps.generate-identifiers.outputs.LAMBDA_FUNCTION_NAME }}
          ROLE_NAME: ${{ steps.generate-identifiers.outputs.ROLE_NAME }}
        run: |
          aws lambda delete-function --function-name $LAMBDA_FUNCTION_NAME
          aws iam detach-role-policy \
            --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          aws iam delete-role --role-name $ROLE_NAME