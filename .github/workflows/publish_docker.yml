name: Deploy to ECR

on:
  push:
    branches: [ docker ]

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_PUBLIC_REGISTRY: public.ecr.aws
        ECR_REPOSITORY: aws-cloudformation/cfn-guard
        REGISTRY_ALIAS: b7s9m2k8
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        git_branch=${GITHUB_REF#refs/heads/}
        commit_hash=${git_branch}.${git_hash}
        
        public_registry_prefix=$ECR_PUBLIC_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY
        public_image_latest_tag=$public_registry_prefix:latest
        public_image_commit_tag=$public_registry_prefix:$commit_hash
        
        private_registry_prefix=$ECR_REGISTRY/$ECR_REPOSITORY
        private_image_latest_tag=$private_registry_prefix:latest
        private_image_commit_tag=$private_registry_prefix:$commit_hash
        
        docker build -t $private_image_commit_tag .
        docker push $private_image_commit_tag
        
        docker tag $private_image_commit_tag $public_image_commit_tag
        docker push $public_image_commit_tag
        
        if [ ${git_branch} == 'docker' ]
        then
          docker tag $private_image_commit_tag $private_image_latest_tag
          docker push $private_image_latest_tag
        
          docker tag $private_image_commit_tag $public_image_latest_tag
          docker push $public_image_latest_tag
        fi